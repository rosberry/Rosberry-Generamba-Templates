{% include 'header' %}

import UIKit

protocol {{ module_info.name }}ViewInput: class {
    func update(with viewModel: {{ module_info.name }}ViewModel, force: Bool, animated: Bool)
}

protocol {{ module_info.name }}ViewOutput: class {
    func viewDidLoad()
}

final class {{ module_info.name }}ViewController: UIViewController {

    private var viewModel: {{ module_info.name }}ViewModel
    private let output: {{ module_info.name }}ViewOutput

    // MARK: - Lifecycle

    init(viewModel: {{ module_info.name }}ViewModel, output: {{ module_info.name }}ViewOutput) {
        self.viewModel = viewModel
        self.output = output
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        output.viewDidLoad()
    }

    // MARK: - Layout

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
    }
}

// MARK: - {{ module_info.name }}ViewInput

extension {{ module_info.name }}ViewController: {{ module_info.name }}ViewInput, ForceViewUpdate {

    func update(with viewModel: {{ module_info.name }}ViewModel, force: Bool, animated: Bool) {
        let oldViewModel = self.viewModel
        self.viewModel = viewModel

        func updateViewModel<Value: Equatable>(_ keyPath: KeyPath<SearchViewModel, Value>, configurationBlock: (Value) -> Void) {
            update(new: viewModel, old: oldViewModel, keyPath: keyPath, force: force, configurationBlock: configurationBlock)
        }
    }
}
