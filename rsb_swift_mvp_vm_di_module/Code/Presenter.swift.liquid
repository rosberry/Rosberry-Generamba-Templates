{% include 'header' %}

final class {{ prefix }}{{ module_info.name }}Presenter {

    typealias Dependencies = Any

    weak var view: {{ prefix }}{{ module_info.name }}ViewInput?
    weak var output: {{ prefix }}{{ module_info.name }}ModuleOutput?

    var state: {{ prefix }}{{ module_info.name }}State

    private let dependencies: Dependencies

    init(state: {{ prefix }}{{ module_info.name }}State, dependencies: Dependencies) {
        self.state = state
        self.dependencies = dependencies
    }
}

// MARK: - {{ prefix }}{{ module_info.name }}ViewOutput, {{ prefix }}{{ module_info.name }}ViewModelOutput

extension {{ prefix }}{{ module_info.name }}Presenter: {{ prefix }}{{ module_info.name }}ViewOutput, {{ prefix }}{{ module_info.name }}ViewModelOutput {

    func viewDidLoad() {
        update(animated: false)
    }
}

// MARK: - {{ prefix }}{{ module_info.name }}ModuleInput

extension {{ prefix }}{{ module_info.name }}Presenter: {{ prefix }}{{ module_info.name }}ModuleInput {

    func update(animated: Bool) {
        let viewModel = {{ prefix }}{{ module_info.name }}ViewModel(state: state, output: self)
        view?.update(with: viewModel, animated: animated)
    }
}
