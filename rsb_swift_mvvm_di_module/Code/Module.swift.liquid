{% include 'header' %}

protocol {{ prefix }}{{ module_info.name }}ModuleInput: AnyObject {
}

protocol {{ prefix }}{{ module_info.name }}ModuleOutput: AnyObject {
}

final class {{ prefix }}{{ module_info.name }}Module {

    var input: {{ prefix }}{{ module_info.name }}ModuleInput {
        return viewModel
    }
    var output: {{ prefix }}{{ module_info.name }}ModuleOutput? {
        set {
            viewModel.output = newValue
        }
        get {
            return viewModel.output
        }
    }
    let viewController: {{ prefix }}{{ module_info.name }}ViewController

    private let viewModel: {{ prefix }}{{ module_info.name }}ViewModel

    init() {
        let dependencies = [Any]()
        let router = {{ prefix }}{{ module_info.name }}Router()
        viewModel = {{ prefix }}{{ module_info.name }}ViewModel(dependencies: dependencies, router: router)
        viewController = {{ prefix }}{{ module_info.name }}ViewController(viewModel: viewModel)
        viewModel.delegate = viewController
        router.set(viewController: viewController, viewModel: viewModel)
    }
}
